import { ActionDrawer, DataTable } from "@/modules/common";
import {
  DashboardContainerStyled,
  EmptyOrdersContainerStyled,
  NewOrder,
} from "@/modules/dashboard";
import { useGetAllParcelsQuery } from "@/redux/services/parcel.service";
import { IUserParcel, setParcels } from "@/redux/slices/auth.slice";
import { RootState, useAppDispatch, useAppSelector } from "@/redux/store";
import { Typography, Box, Button } from "@mui/material";
import Head from "next/head";
import Image from "next/image";
import React, { useEffect, useState } from "react";

const headers: any[] = [
  { id: "name", label: "Parcel Name" },
  { id: "pickup", label: "Pick-up Address" },
  { id: "dropoff", label: "Drop-off Address" },
  { id: "action", label: "" },
];

function User() {
  const { user, parcels } = useAppSelector((state: RootState) => state?.auth);
  const { data } = useGetAllParcelsQuery({} as unknown as void, {
    refetchOnMountOrArgChange: true,
  });
  const dispatch = useAppDispatch();
  const isParcelsEmpty = !parcels || parcels.length === 0;
  const [selectedParcel, setSelectedParcel] = useState<
    IUserParcel | undefined
  >();

  const [isDrawerOpen, setDrawerOpen] = useState(false);
  const toggleDrawer =
    (open: boolean) => (event: React.KeyboardEvent | React.MouseEvent) => {
      if (
        event &&
        event.type === "keydown" &&
        ((event as React.KeyboardEvent).key === "Tab" ||
          (event as React.KeyboardEvent).key === "Shift")
      ) {
        return;
      }

      setDrawerOpen(open);
    };

  useEffect(() => {
    if (data) {
      dispatch(setParcels({ parcels: [...(data || [])] }));
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [data]);

  const renderParcels = () => {
    if (isParcelsEmpty) {
      return (
        <EmptyOrdersContainerStyled>
          <Image
            src="/assets/empty-parcels.svg"
            alt="Empty"
            width="600"
            height="300"
          />
          <Box className="emptyStateText">
            <Typography variant="body1">
              No parcels to pick up. Please wait for new parcels!
            </Typography>
          </Box>
        </EmptyOrdersContainerStyled>
      );
    }

    const rows = parcels.map((parcel) => {
      return {
        name: parcel.name,
        pickup: parcel.pickup.address,
        dropoff: parcel.dropoff.address,
        id: parcel.id,
        action: (
          <Button
            onClick={(e) => {
              e.preventDefault();
              e.stopPropagation();
              setSelectedParcel(parcel);
              setDrawerOpen(true);
            }}
          >
            Pick it up
          </Button>
        ),
      };
    });

    return <DataTable rows={rows} headers={headers} />;
  };

  return (
    <>
      <Head>
        <title>Parcels Managment</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <DashboardContainerStyled>
        <Typography variant="h2">Hi {user?.name},</Typography>

        <Box>{renderParcels()}</Box>
      </DashboardContainerStyled>

      <ActionDrawer open={isDrawerOpen} toggleDrawer={toggleDrawer}>
        <NewOrder parcel={selectedParcel} handleClose={toggleDrawer(false)} />
      </ActionDrawer>
    </>
  );
}

export default User;
